#include <iostream>
using namespace std;
#include <string>

/* 构造函数和析构函数 */
// 这两个函数将会被编译器自动调用


class Person {
	// 构造函数 初始化
	// 1. 构造函数，没有返回值也不写void
	// 2. 函数名称与类名相同
	// 3. 构造函数可以有参数，因此可以发生重载
	// 4. 程序在调用对象时候会自动调用构造函数，无须手动调用, 而且只会调用一次

public:	// 如要要调用需要加public
	// 假设Pseson函数没有写，则系统自动为空
	Person() {
		cout << "Person 构造函数调用" << endl;
	}

	
	// 析构函数 执行清理
	// 1. 析构函数，没有返回值也不写void
	// 2. 函数名称与类名相同, 在名称前加上符号~
	// 3. 析构函数不可以有参数，因此不可以发生重载
	// 4. 程序在对象销毁前会自动调用析构，无须手动调用, 而且只会调用一次
	~Person(){
		cout << "Person 析构函数调用" << endl;
	}
};




/* 测试调用 */
// 构造和析构都是必须有的实现，如果不提供则编译器会提供空实现的构造和析构
void test() {
	Person p;	// 因为数据在栈上，所以执行完毕后就释放对象
}


int main() {

	// 调用
	// 自动调用了Person函数，并打印了
	test();		// 此处因为走了test函数，所以等于调用完就被释放

	Person p;	// 此处因为在main函数内，因为没走完，走到了下一步的pause，所以没有析构，所以当按下键盘后，则瞬间完成了main调用，所以是执行完了销毁了才会出现析构

	system("pause");
	return 0;
}